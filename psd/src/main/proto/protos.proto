syntax="proto2";

package main.proto;

//Este é usado para indicar o tipo de utilizador, e que tipo de mensagem vai ser enviada. Production, Negotiation
message Syn{
	required Type type = 1;

	enum Type{
		FAB = 0;
		IMP = 1;
		DROP = 2;
	}
}

//Mensagem utilizada para indicar qual o tipo de operação o importador quer realizar a seguir
message ImpSyn{
	required OpType type = 1;

	enum OpType{
		OFFER = 0;
		OVER  = 1;
	}
}

//Mensagem utilizada para indicar qual o tipo de operação o importador quer realizar a seguir
message FabSyn{
	required OpType type = 1;

	enum OpType{
		PRODUCT = 0;
		OVER    = 1;
	}
}

//So é usado para a autenticação
message Login {
    required string name = 1;
    required string pass = 2;
}

//É usado para confirmar a autenticação
message LoginConfirmation{
	required bool response = 1;
	required string username = 2;
}

//O fabricante envia para o servidor qual será o negocio que pretende adicionar
message Production{
	required string product_name = 1;
	required int32 min = 2;
	required int32 max = 3;
	required int32 price = 4;
	required string data = 5;
}

//O importador coloca o negocio que pretende adicionar
message Negotiation{
	required string fabricante = 1;
	required string product_name = 2;
	required int32 price = 3;
	required int32 amount = 4;
	required string data = 5;
}

//O server envia a indicar qual é o resultado da inserção do produto/negocio
//O zeroMQ é a string que tem que enviar para o ZeroMQ
message BusinessConfirmation{
	required bool response = 1;
	required string fabricante = 2;
	required string produto = 3;
}

message Notification{
	required string fabricante = 1;
	required string produto = 2;
	required string username = 3;
}


//Comentario a indicar as listas de coisas que vai enviar
//Tambem pode ser usado no Dropwizard para 
message ConfirmNegotiations{
	repeated AceptedNegotiation acepted = 1;
}

//Negocio envolvido. No final
message AceptedNegotiation{
	required string importer_offer = 1;
	required string product_name = 2;
	required int32 price = 3;
	required int32 amount = 4;
	required string data = 5;
	required int32 state = 6;
}






//Cliente envia ao servidor a indicar o pedido
message Dropwizard{
	required DropType type = 1;
	required string username = 2;
	required string prod = 3;

	enum DropType{
		PROD = 0;
		NEG  = 1;
		IMP  = 2;
	}
}

//Resposta do Dropwizard aos Produtos
message ResponseDropProd{
	repeated Production products = 1;
}