%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.6
-module(protos).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protos.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Syn'() :: #'Syn'{}.

-type 'Login'() :: #'Login'{}.

-type 'LoginConfirmation'() :: #'LoginConfirmation'{}.

-type 'Production'() :: #'Production'{}.

-type 'Negotiation'() :: #'Negotiation'{}.

-type 'BusinessConfirmation'() :: #'BusinessConfirmation'{}.

-type 'NegotiationsConfirmatio'() :: #'NegotiationsConfirmatio'{}.

-type 'AceptedNegotiation'() :: #'AceptedNegotiation'{}.

-type 'Dropwizard'() :: #'Dropwizard'{}.

-type 'ResponseDropProd'() :: #'ResponseDropProd'{}.

-export_type(['Syn'/0, 'Login'/0, 'LoginConfirmation'/0, 'Production'/0, 'Negotiation'/0, 'BusinessConfirmation'/0, 'NegotiationsConfirmatio'/0, 'AceptedNegotiation'/0, 'Dropwizard'/0, 'ResponseDropProd'/0]).

-spec encode_msg(#'Syn'{} | #'Login'{} | #'LoginConfirmation'{} | #'Production'{} | #'Negotiation'{} | #'BusinessConfirmation'{} | #'NegotiationsConfirmatio'{} | #'AceptedNegotiation'{} | #'Dropwizard'{} | #'ResponseDropProd'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Syn'{} | #'Login'{} | #'LoginConfirmation'{} | #'Production'{} | #'Negotiation'{} | #'BusinessConfirmation'{} | #'NegotiationsConfirmatio'{} | #'AceptedNegotiation'{} | #'Dropwizard'{} | #'ResponseDropProd'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Syn'{} | #'Login'{} | #'LoginConfirmation'{} | #'Production'{} | #'Negotiation'{} | #'BusinessConfirmation'{} | #'NegotiationsConfirmatio'{} | #'AceptedNegotiation'{} | #'Dropwizard'{} | #'ResponseDropProd'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Syn' ->
	  encode_msg_Syn(id(Msg, TrUserData), TrUserData);
      'Login' ->
	  encode_msg_Login(id(Msg, TrUserData), TrUserData);
      'LoginConfirmation' ->
	  encode_msg_LoginConfirmation(id(Msg, TrUserData),
				       TrUserData);
      'Production' ->
	  encode_msg_Production(id(Msg, TrUserData), TrUserData);
      'Negotiation' ->
	  encode_msg_Negotiation(id(Msg, TrUserData), TrUserData);
      'BusinessConfirmation' ->
	  encode_msg_BusinessConfirmation(id(Msg, TrUserData),
					  TrUserData);
      'NegotiationsConfirmatio' ->
	  encode_msg_NegotiationsConfirmatio(id(Msg, TrUserData),
					     TrUserData);
      'AceptedNegotiation' ->
	  encode_msg_AceptedNegotiation(id(Msg, TrUserData),
					TrUserData);
      'Dropwizard' ->
	  encode_msg_Dropwizard(id(Msg, TrUserData), TrUserData);
      'ResponseDropProd' ->
	  encode_msg_ResponseDropProd(id(Msg, TrUserData),
				      TrUserData)
    end.


encode_msg_Syn(Msg, TrUserData) ->
    encode_msg_Syn(Msg, <<>>, TrUserData).


encode_msg_Syn(#'Syn'{type = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_Login(Msg, TrUserData) ->
    encode_msg_Login(Msg, <<>>, TrUserData).


encode_msg_Login(#'Login'{name = F1, pass = F2}, Bin,
		 TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_LoginConfirmation(Msg, TrUserData) ->
    encode_msg_LoginConfirmation(Msg, <<>>, TrUserData).


encode_msg_LoginConfirmation(#'LoginConfirmation'{response
						      = F1},
			     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_Production(Msg, TrUserData) ->
    encode_msg_Production(Msg, <<>>, TrUserData).


encode_msg_Production(#'Production'{product_name = F1,
				    min = F2, max = F3, price = F4, data = F5},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
    end.

encode_msg_Negotiation(Msg, TrUserData) ->
    encode_msg_Negotiation(Msg, <<>>, TrUserData).


encode_msg_Negotiation(#'Negotiation'{importer_offer =
					  F1,
				      product_name = F2, price = F3,
				      amount = F4, data = F5},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_float(TrF3, <<B2/binary, 37>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 40>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 50>>, TrUserData)
    end.

encode_msg_BusinessConfirmation(Msg, TrUserData) ->
    encode_msg_BusinessConfirmation(Msg, <<>>, TrUserData).


encode_msg_BusinessConfirmation(#'BusinessConfirmation'{response
							    = F1,
							zeroMQ = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_NegotiationsConfirmatio(Msg, TrUserData) ->
    encode_msg_NegotiationsConfirmatio(Msg, <<>>,
				       TrUserData).


encode_msg_NegotiationsConfirmatio(#'NegotiationsConfirmatio'{acepted
								  = F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_NegotiationsConfirmatio_acepted(TrF1, Bin,
						     TrUserData)
      end
    end.

encode_msg_AceptedNegotiation(Msg, TrUserData) ->
    encode_msg_AceptedNegotiation(Msg, <<>>, TrUserData).


encode_msg_AceptedNegotiation(#'AceptedNegotiation'{importer_offer
							= F1,
						    product_name = F2,
						    price = F3, amount = F4,
						    data = F5, state = F6},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_float(TrF3, <<B2/binary, 37>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 40>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 50>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_string(TrF6, <<B5/binary, 58>>, TrUserData)
    end.

encode_msg_Dropwizard(Msg, TrUserData) ->
    encode_msg_Dropwizard(Msg, <<>>, TrUserData).


encode_msg_Dropwizard(#'Dropwizard'{type = F1,
				    username = F2, prod = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_ResponseDropProd(Msg, TrUserData) ->
    encode_msg_ResponseDropProd(Msg, <<>>, TrUserData).


encode_msg_ResponseDropProd(#'ResponseDropProd'{products
						    = F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_ResponseDropProd_products(TrF1, Bin, TrUserData)
      end
    end.

e_mfield_NegotiationsConfirmatio_acepted(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_AceptedNegotiation(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_NegotiationsConfirmatio_acepted([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_NegotiationsConfirmatio_acepted(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_NegotiationsConfirmatio_acepted(Rest, Bin3,
					    TrUserData);
e_field_NegotiationsConfirmatio_acepted([], Bin,
					_TrUserData) ->
    Bin.

e_mfield_ResponseDropProd_products(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_Production(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ResponseDropProd_products([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ResponseDropProd_products(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_ResponseDropProd_products(Rest, Bin3,
				      TrUserData);
e_field_ResponseDropProd_products([], Bin,
				  _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Syn', Bin, TrUserData) ->
    id(decode_msg_Syn(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Login', Bin, TrUserData) ->
    id(decode_msg_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginConfirmation', Bin,
		  TrUserData) ->
    id(decode_msg_LoginConfirmation(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Production', Bin, TrUserData) ->
    id(decode_msg_Production(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Negotiation', Bin, TrUserData) ->
    id(decode_msg_Negotiation(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BusinessConfirmation', Bin,
		  TrUserData) ->
    id(decode_msg_BusinessConfirmation(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('NegotiationsConfirmatio', Bin,
		  TrUserData) ->
    id(decode_msg_NegotiationsConfirmatio(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AceptedNegotiation', Bin,
		  TrUserData) ->
    id(decode_msg_AceptedNegotiation(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Dropwizard', Bin, TrUserData) ->
    id(decode_msg_Dropwizard(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ResponseDropProd', Bin,
		  TrUserData) ->
    id(decode_msg_ResponseDropProd(Bin, TrUserData),
       TrUserData).



decode_msg_Syn(Bin, TrUserData) ->
    dfp_read_field_def_Syn(Bin, 0, 0,
			   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Syn(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    d_field_Syn_type(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Syn(<<>>, 0, 0, F@_1, _) ->
    #'Syn'{type = F@_1};
dfp_read_field_def_Syn(Other, Z1, Z2, F@_1,
		       TrUserData) ->
    dg_read_field_def_Syn(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_Syn(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Syn(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
dg_read_field_def_Syn(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Syn_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Syn(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Syn(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Syn(Rest, 0, 0, F@_1, TrUserData);
	    3 ->
		skip_group_Syn(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Syn(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Syn(<<>>, 0, 0, F@_1, _) ->
    #'Syn'{type = F@_1}.

d_field_Syn_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, TrUserData)
    when N < 57 ->
    d_field_Syn_type(Rest, N + 7, X bsl N + Acc, F@_1,
		     TrUserData);
d_field_Syn_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Syn(RestF, 0, 0, NewFValue,
			   TrUserData).

skip_varint_Syn(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    skip_varint_Syn(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Syn(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Syn(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_Syn(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Syn(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
skip_length_delimited_Syn(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Syn(Rest2, 0, 0, F@_1, TrUserData).

skip_group_Syn(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Syn(Rest, 0, Z2, F@_1, TrUserData).

skip_32_Syn(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	    TrUserData) ->
    dfp_read_field_def_Syn(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_Syn(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	    TrUserData) ->
    dfp_read_field_def_Syn(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_Login(Bin, TrUserData) ->
    dfp_read_field_def_Login(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Login(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Login_name(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_Login(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Login_pass(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_Login(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Login'{name = F@_1, pass = F@_2};
dfp_read_field_def_Login(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_Login(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_Login(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Login(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_Login(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Login_name(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_Login_pass(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Login(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_Login(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Login(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Login'{name = F@_1, pass = F@_2}.

d_field_Login_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Login_name(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_Login_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Login(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_Login_pass(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Login_pass(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_Login_pass(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Login(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_Login(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Login(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_Login(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Login(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

decode_msg_LoginConfirmation(Bin, TrUserData) ->
    dfp_read_field_def_LoginConfirmation(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginConfirmation(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_LoginConfirmation_response(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_LoginConfirmation(<<>>, 0, 0, F@_1,
				     _) ->
    #'LoginConfirmation'{response = F@_1};
dfp_read_field_def_LoginConfirmation(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_LoginConfirmation(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_LoginConfirmation(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginConfirmation(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LoginConfirmation(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LoginConfirmation_response(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginConfirmation(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_LoginConfirmation(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_LoginConfirmation(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_LoginConfirmation(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_LoginConfirmation(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_LoginConfirmation(<<>>, 0, 0, F@_1,
				    _) ->
    #'LoginConfirmation'{response = F@_1}.

d_field_LoginConfirmation_response(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LoginConfirmation_response(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_LoginConfirmation_response(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_LoginConfirmation(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_LoginConfirmation(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_LoginConfirmation(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_LoginConfirmation(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LoginConfirmation(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_LoginConfirmation(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginConfirmation(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LoginConfirmation(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginConfirmation(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_LoginConfirmation(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginConfirmation(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_LoginConfirmation(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_LoginConfirmation(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_LoginConfirmation(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_LoginConfirmation(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_Production(Bin, TrUserData) ->
    dfp_read_field_def_Production(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Production(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Production_product_name(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Production(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Production_min(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Production(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Production_max(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Production(<<37, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Production_price(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Production(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Production_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_Production(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #'Production'{product_name = F@_1, min = F@_2,
		  max = F@_3, price = F@_4, data = F@_5};
dfp_read_field_def_Production(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Production(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Production(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Production(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Production(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Production_product_name(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_Production_min(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      24 ->
	  d_field_Production_max(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      37 ->
	  d_field_Production_price(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      42 ->
	  d_field_Production_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Production(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_Production(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Production(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Production(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Production(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Production(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #'Production'{product_name = F@_1, min = F@_2,
		  max = F@_3, price = F@_4, data = F@_5}.

d_field_Production_product_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_Production_product_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_Production_product_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Production(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Production_min(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Production_min(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Production_min(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Production(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_Production_max(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Production_max(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Production_max(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Production(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, TrUserData).

d_field_Production_price(<<0:16, 128, 127,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Production(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id(infinity, TrUserData), F@_5,
				  TrUserData);
d_field_Production_price(<<0:16, 128, 255,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Production(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id('-infinity', TrUserData), F@_5,
				  TrUserData);
d_field_Production_price(<<_:16, 1:1, _:7, _:1, 127:7,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Production(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id(nan, TrUserData), F@_5, TrUserData);
d_field_Production_price(<<Value:32/little-float,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Production(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id(Value, TrUserData), F@_5,
				  TrUserData).

d_field_Production_data(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Production_data(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Production_data(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Production(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Production(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Production(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_Production(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Production(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Production(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_Production(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_Production(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Production(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_Production(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Production(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_Production(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Production(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_Production(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Production(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_Negotiation(Bin, TrUserData) ->
    dfp_read_field_def_Negotiation(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Negotiation(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Negotiation_importer_offer(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Negotiation(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Negotiation_product_name(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Negotiation(<<37, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Negotiation_price(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Negotiation(<<40, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Negotiation_amount(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Negotiation(<<50, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Negotiation_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Negotiation(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, _) ->
    #'Negotiation'{importer_offer = F@_1,
		   product_name = F@_2, price = F@_3, amount = F@_4,
		   data = F@_5};
dfp_read_field_def_Negotiation(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Negotiation(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Negotiation(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Negotiation(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
dg_read_field_def_Negotiation(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Negotiation_importer_offer(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      26 ->
	  d_field_Negotiation_product_name(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      37 ->
	  d_field_Negotiation_price(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      40 ->
	  d_field_Negotiation_amount(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      50 ->
	  d_field_Negotiation_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Negotiation(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_Negotiation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Negotiation(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
	    3 ->
		skip_group_Negotiation(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Negotiation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Negotiation(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #'Negotiation'{importer_offer = F@_1,
		   product_name = F@_2, price = F@_3, amount = F@_4,
		   data = F@_5}.

d_field_Negotiation_importer_offer(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_Negotiation_importer_offer(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_Negotiation_importer_offer(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Negotiation(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Negotiation_product_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_Negotiation_product_name(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_Negotiation_product_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Negotiation(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_Negotiation_price(<<0:16, 128, 127,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Negotiation(Rest, Z1, Z2, F@_1, F@_2,
				   id(infinity, TrUserData), F@_4, F@_5,
				   TrUserData);
d_field_Negotiation_price(<<0:16, 128, 255,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Negotiation(Rest, Z1, Z2, F@_1, F@_2,
				   id('-infinity', TrUserData), F@_4, F@_5,
				   TrUserData);
d_field_Negotiation_price(<<_:16, 1:1, _:7, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Negotiation(Rest, Z1, Z2, F@_1, F@_2,
				   id(nan, TrUserData), F@_4, F@_5, TrUserData);
d_field_Negotiation_price(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Negotiation(Rest, Z1, Z2, F@_1, F@_2,
				   id(Value, TrUserData), F@_4, F@_5,
				   TrUserData).

d_field_Negotiation_amount(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Negotiation_amount(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Negotiation_amount(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Negotiation(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, TrUserData).

d_field_Negotiation_data(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Negotiation_data(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Negotiation_data(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Negotiation(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Negotiation(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Negotiation(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
skip_varint_Negotiation(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Negotiation(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Negotiation(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    skip_length_delimited_Negotiation(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
skip_length_delimited_Negotiation(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Negotiation(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_group_Negotiation(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Negotiation(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_32_Negotiation(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Negotiation(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_64_Negotiation(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Negotiation(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

decode_msg_BusinessConfirmation(Bin, TrUserData) ->
    dfp_read_field_def_BusinessConfirmation(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_BusinessConfirmation(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_BusinessConfirmation_response(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_BusinessConfirmation(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_BusinessConfirmation_zeroMQ(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_BusinessConfirmation(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'BusinessConfirmation'{response = F@_1, zeroMQ = F@_2};
dfp_read_field_def_BusinessConfirmation(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_BusinessConfirmation(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_BusinessConfirmation(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BusinessConfirmation(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_BusinessConfirmation(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BusinessConfirmation_response(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  d_field_BusinessConfirmation_zeroMQ(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BusinessConfirmation(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_BusinessConfirmation(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_BusinessConfirmation(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_BusinessConfirmation(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_BusinessConfirmation(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_BusinessConfirmation(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'BusinessConfirmation'{response = F@_1, zeroMQ = F@_2}.

d_field_BusinessConfirmation_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BusinessConfirmation_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_BusinessConfirmation_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_BusinessConfirmation(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_BusinessConfirmation_zeroMQ(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BusinessConfirmation_zeroMQ(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BusinessConfirmation_zeroMQ(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_BusinessConfirmation(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_BusinessConfirmation(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_BusinessConfirmation(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_BusinessConfirmation(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BusinessConfirmation(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_BusinessConfirmation(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BusinessConfirmation(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_BusinessConfirmation(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BusinessConfirmation(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_BusinessConfirmation(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BusinessConfirmation(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_BusinessConfirmation(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BusinessConfirmation(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_BusinessConfirmation(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BusinessConfirmation(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_NegotiationsConfirmatio(Bin, TrUserData) ->
    dfp_read_field_def_NegotiationsConfirmatio(Bin, 0, 0,
					       id([], TrUserData), TrUserData).

dfp_read_field_def_NegotiationsConfirmatio(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_NegotiationsConfirmatio_acepted(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_NegotiationsConfirmatio(<<>>, 0, 0,
					   R1, TrUserData) ->
    #'NegotiationsConfirmatio'{acepted =
				   lists_reverse(R1, TrUserData)};
dfp_read_field_def_NegotiationsConfirmatio(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_NegotiationsConfirmatio(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_NegotiationsConfirmatio(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NegotiationsConfirmatio(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_NegotiationsConfirmatio(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NegotiationsConfirmatio_acepted(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NegotiationsConfirmatio(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_NegotiationsConfirmatio(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_NegotiationsConfirmatio(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_NegotiationsConfirmatio(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_NegotiationsConfirmatio(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_NegotiationsConfirmatio(<<>>, 0, 0,
					  R1, TrUserData) ->
    #'NegotiationsConfirmatio'{acepted =
				   lists_reverse(R1, TrUserData)}.

d_field_NegotiationsConfirmatio_acepted(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_NegotiationsConfirmatio_acepted(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_NegotiationsConfirmatio_acepted(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AceptedNegotiation(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NegotiationsConfirmatio(RestF, 0, 0,
					       cons(NewFValue, Prev,
						    TrUserData),
					       TrUserData).

skip_varint_NegotiationsConfirmatio(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_NegotiationsConfirmatio(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_NegotiationsConfirmatio(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NegotiationsConfirmatio(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_NegotiationsConfirmatio(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_NegotiationsConfirmatio(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_NegotiationsConfirmatio(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NegotiationsConfirmatio(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_NegotiationsConfirmatio(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NegotiationsConfirmatio(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_NegotiationsConfirmatio(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NegotiationsConfirmatio(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_NegotiationsConfirmatio(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NegotiationsConfirmatio(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_AceptedNegotiation(Bin, TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_AceptedNegotiation(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_AceptedNegotiation_importer_offer(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
dfp_read_field_def_AceptedNegotiation(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_AceptedNegotiation_product_name(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
dfp_read_field_def_AceptedNegotiation(<<37,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_AceptedNegotiation_price(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AceptedNegotiation(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_AceptedNegotiation_amount(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AceptedNegotiation(<<50,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_AceptedNegotiation_data(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AceptedNegotiation(<<58,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_AceptedNegotiation_state(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AceptedNegotiation(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'AceptedNegotiation'{importer_offer = F@_1,
			  product_name = F@_2, price = F@_3, amount = F@_4,
			  data = F@_5, state = F@_6};
dfp_read_field_def_AceptedNegotiation(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData) ->
    dg_read_field_def_AceptedNegotiation(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 TrUserData).

dg_read_field_def_AceptedNegotiation(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AceptedNegotiation(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
dg_read_field_def_AceptedNegotiation(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AceptedNegotiation_importer_offer(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      26 ->
	  d_field_AceptedNegotiation_product_name(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, TrUserData);
      37 ->
	  d_field_AceptedNegotiation_price(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
      40 ->
	  d_field_AceptedNegotiation_amount(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
      50 ->
	  d_field_AceptedNegotiation_data(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      58 ->
	  d_field_AceptedNegotiation_state(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AceptedNegotiation(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
	    1 ->
		skip_64_AceptedNegotiation(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_AceptedNegotiation(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6,
							 TrUserData);
	    3 ->
		skip_group_AceptedNegotiation(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
	    5 ->
		skip_32_AceptedNegotiation(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_AceptedNegotiation(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'AceptedNegotiation'{importer_offer = F@_1,
			  product_name = F@_2, price = F@_3, amount = F@_4,
			  data = F@_5, state = F@_6}.

d_field_AceptedNegotiation_importer_offer(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    d_field_AceptedNegotiation_importer_offer(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
d_field_AceptedNegotiation_importer_offer(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AceptedNegotiation(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData).

d_field_AceptedNegotiation_product_name(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, TrUserData)
    when N < 57 ->
    d_field_AceptedNegotiation_product_name(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, TrUserData);
d_field_AceptedNegotiation_product_name(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
					TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AceptedNegotiation(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

d_field_AceptedNegotiation_price(<<0:16, 128, 127,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				 TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Rest, Z1, Z2,
					  F@_1, F@_2, id(infinity, TrUserData),
					  F@_4, F@_5, F@_6, TrUserData);
d_field_AceptedNegotiation_price(<<0:16, 128, 255,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				 TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Rest, Z1, Z2,
					  F@_1, F@_2,
					  id('-infinity', TrUserData), F@_4,
					  F@_5, F@_6, TrUserData);
d_field_AceptedNegotiation_price(<<_:16, 1:1, _:7, _:1,
				   127:7, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				 TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Rest, Z1, Z2,
					  F@_1, F@_2, id(nan, TrUserData), F@_4,
					  F@_5, F@_6, TrUserData);
d_field_AceptedNegotiation_price(<<Value:32/little-float,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				 TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Rest, Z1, Z2,
					  F@_1, F@_2, id(Value, TrUserData),
					  F@_4, F@_5, F@_6, TrUserData).

d_field_AceptedNegotiation_amount(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 57 ->
    d_field_AceptedNegotiation_amount(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
d_field_AceptedNegotiation_amount(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AceptedNegotiation(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5, F@_6,
					  TrUserData).

d_field_AceptedNegotiation_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_AceptedNegotiation_data(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_AceptedNegotiation_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AceptedNegotiation(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue, F@_6,
					  TrUserData).

d_field_AceptedNegotiation_state(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    d_field_AceptedNegotiation_state(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
d_field_AceptedNegotiation_state(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AceptedNegotiation(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, NewFValue,
					  TrUserData).

skip_varint_AceptedNegotiation(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    skip_varint_AceptedNegotiation(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_AceptedNegotiation(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_length_delimited_AceptedNegotiation(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_AceptedNegotiation(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_AceptedNegotiation(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AceptedNegotiation(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_group_AceptedNegotiation(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AceptedNegotiation(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_32_AceptedNegotiation(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_64_AceptedNegotiation(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_AceptedNegotiation(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

decode_msg_Dropwizard(Bin, TrUserData) ->
    dfp_read_field_def_Dropwizard(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Dropwizard(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Dropwizard_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_Dropwizard(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Dropwizard_username(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_Dropwizard(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Dropwizard_prod(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_Dropwizard(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #'Dropwizard'{type = F@_1, username = F@_2,
		  prod = F@_3};
dfp_read_field_def_Dropwizard(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_Dropwizard(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_Dropwizard(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Dropwizard(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Dropwizard(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Dropwizard_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      18 ->
	  d_field_Dropwizard_username(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      26 ->
	  d_field_Dropwizard_prod(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Dropwizard(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_Dropwizard(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_Dropwizard(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_Dropwizard(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_Dropwizard(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_Dropwizard(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'Dropwizard'{type = F@_1, username = F@_2,
		  prod = F@_3}.

d_field_Dropwizard_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Dropwizard_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_Dropwizard_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Dropwizard(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, TrUserData).

d_field_Dropwizard_username(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Dropwizard_username(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_Dropwizard_username(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Dropwizard(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, TrUserData).

d_field_Dropwizard_prod(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Dropwizard_prod(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_Dropwizard_prod(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Dropwizard(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, TrUserData).

skip_varint_Dropwizard(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Dropwizard(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_Dropwizard(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Dropwizard(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_Dropwizard(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Dropwizard(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_Dropwizard(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Dropwizard(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_Dropwizard(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Dropwizard(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_Dropwizard(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Dropwizard(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_Dropwizard(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Dropwizard(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

decode_msg_ResponseDropProd(Bin, TrUserData) ->
    dfp_read_field_def_ResponseDropProd(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_ResponseDropProd(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ResponseDropProd_products(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_ResponseDropProd(<<>>, 0, 0, R1,
				    TrUserData) ->
    #'ResponseDropProd'{products =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_ResponseDropProd(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_ResponseDropProd(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_ResponseDropProd(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseDropProd(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ResponseDropProd(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseDropProd_products(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseDropProd(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_ResponseDropProd(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ResponseDropProd(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_ResponseDropProd(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_ResponseDropProd(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ResponseDropProd(<<>>, 0, 0, R1,
				   TrUserData) ->
    #'ResponseDropProd'{products =
			    lists_reverse(R1, TrUserData)}.

d_field_ResponseDropProd_products(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ResponseDropProd_products(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_ResponseDropProd_products(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Production(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseDropProd(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_ResponseDropProd(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ResponseDropProd(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_ResponseDropProd(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ResponseDropProd(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_ResponseDropProd(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseDropProd(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ResponseDropProd(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseDropProd(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_ResponseDropProd(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResponseDropProd(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_ResponseDropProd(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_ResponseDropProd(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_ResponseDropProd(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_ResponseDropProd(Rest, Z1, Z2, F@_1,
					TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Syn' -> merge_msg_Syn(Prev, New, TrUserData);
      'Login' -> merge_msg_Login(Prev, New, TrUserData);
      'LoginConfirmation' ->
	  merge_msg_LoginConfirmation(Prev, New, TrUserData);
      'Production' ->
	  merge_msg_Production(Prev, New, TrUserData);
      'Negotiation' ->
	  merge_msg_Negotiation(Prev, New, TrUserData);
      'BusinessConfirmation' ->
	  merge_msg_BusinessConfirmation(Prev, New, TrUserData);
      'NegotiationsConfirmatio' ->
	  merge_msg_NegotiationsConfirmatio(Prev, New,
					    TrUserData);
      'AceptedNegotiation' ->
	  merge_msg_AceptedNegotiation(Prev, New, TrUserData);
      'Dropwizard' ->
	  merge_msg_Dropwizard(Prev, New, TrUserData);
      'ResponseDropProd' ->
	  merge_msg_ResponseDropProd(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Syn/3}).
merge_msg_Syn(#'Syn'{}, #'Syn'{type = NFtype}, _) ->
    #'Syn'{type = NFtype}.

-compile({nowarn_unused_function,merge_msg_Login/3}).
merge_msg_Login(#'Login'{},
		#'Login'{name = NFname, pass = NFpass}, _) ->
    #'Login'{name = NFname, pass = NFpass}.

-compile({nowarn_unused_function,merge_msg_LoginConfirmation/3}).
merge_msg_LoginConfirmation(#'LoginConfirmation'{},
			    #'LoginConfirmation'{response = NFresponse}, _) ->
    #'LoginConfirmation'{response = NFresponse}.

-compile({nowarn_unused_function,merge_msg_Production/3}).
merge_msg_Production(#'Production'{},
		     #'Production'{product_name = NFproduct_name,
				   min = NFmin, max = NFmax, price = NFprice,
				   data = NFdata},
		     _) ->
    #'Production'{product_name = NFproduct_name,
		  min = NFmin, max = NFmax, price = NFprice,
		  data = NFdata}.

-compile({nowarn_unused_function,merge_msg_Negotiation/3}).
merge_msg_Negotiation(#'Negotiation'{},
		      #'Negotiation'{importer_offer = NFimporter_offer,
				     product_name = NFproduct_name,
				     price = NFprice, amount = NFamount,
				     data = NFdata},
		      _) ->
    #'Negotiation'{importer_offer = NFimporter_offer,
		   product_name = NFproduct_name, price = NFprice,
		   amount = NFamount, data = NFdata}.

-compile({nowarn_unused_function,merge_msg_BusinessConfirmation/3}).
merge_msg_BusinessConfirmation(#'BusinessConfirmation'{},
			       #'BusinessConfirmation'{response = NFresponse,
						       zeroMQ = NFzeroMQ},
			       _) ->
    #'BusinessConfirmation'{response = NFresponse,
			    zeroMQ = NFzeroMQ}.

-compile({nowarn_unused_function,merge_msg_NegotiationsConfirmatio/3}).
merge_msg_NegotiationsConfirmatio(#'NegotiationsConfirmatio'{acepted
								 = PFacepted},
				  #'NegotiationsConfirmatio'{acepted =
								 NFacepted},
				  TrUserData) ->
    #'NegotiationsConfirmatio'{acepted =
				   if PFacepted /= undefined,
				      NFacepted /= undefined ->
					  'erlang_++'(PFacepted, NFacepted,
						      TrUserData);
				      PFacepted == undefined -> NFacepted;
				      NFacepted == undefined -> PFacepted
				   end}.

-compile({nowarn_unused_function,merge_msg_AceptedNegotiation/3}).
merge_msg_AceptedNegotiation(#'AceptedNegotiation'{},
			     #'AceptedNegotiation'{importer_offer =
						       NFimporter_offer,
						   product_name =
						       NFproduct_name,
						   price = NFprice,
						   amount = NFamount,
						   data = NFdata,
						   state = NFstate},
			     _) ->
    #'AceptedNegotiation'{importer_offer = NFimporter_offer,
			  product_name = NFproduct_name, price = NFprice,
			  amount = NFamount, data = NFdata, state = NFstate}.

-compile({nowarn_unused_function,merge_msg_Dropwizard/3}).
merge_msg_Dropwizard(#'Dropwizard'{},
		     #'Dropwizard'{type = NFtype, username = NFusername,
				   prod = NFprod},
		     _) ->
    #'Dropwizard'{type = NFtype, username = NFusername,
		  prod = NFprod}.

-compile({nowarn_unused_function,merge_msg_ResponseDropProd/3}).
merge_msg_ResponseDropProd(#'ResponseDropProd'{products
						   = PFproducts},
			   #'ResponseDropProd'{products = NFproducts},
			   TrUserData) ->
    #'ResponseDropProd'{products =
			    if PFproducts /= undefined,
			       NFproducts /= undefined ->
				   'erlang_++'(PFproducts, NFproducts,
					       TrUserData);
			       PFproducts == undefined -> NFproducts;
			       NFproducts == undefined -> PFproducts
			    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Syn' -> v_msg_Syn(Msg, [MsgName], TrUserData);
      'Login' -> v_msg_Login(Msg, [MsgName], TrUserData);
      'LoginConfirmation' ->
	  v_msg_LoginConfirmation(Msg, [MsgName], TrUserData);
      'Production' ->
	  v_msg_Production(Msg, [MsgName], TrUserData);
      'Negotiation' ->
	  v_msg_Negotiation(Msg, [MsgName], TrUserData);
      'BusinessConfirmation' ->
	  v_msg_BusinessConfirmation(Msg, [MsgName], TrUserData);
      'NegotiationsConfirmatio' ->
	  v_msg_NegotiationsConfirmatio(Msg, [MsgName],
					TrUserData);
      'AceptedNegotiation' ->
	  v_msg_AceptedNegotiation(Msg, [MsgName], TrUserData);
      'Dropwizard' ->
	  v_msg_Dropwizard(Msg, [MsgName], TrUserData);
      'ResponseDropProd' ->
	  v_msg_ResponseDropProd(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Syn/3}).
-dialyzer({nowarn_function,v_msg_Syn/3}).
v_msg_Syn(#'Syn'{type = F1}, Path, TrUserData) ->
    v_type_string(F1, [type | Path], TrUserData), ok;
v_msg_Syn(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Syn'}, X, Path).

-compile({nowarn_unused_function,v_msg_Login/3}).
-dialyzer({nowarn_function,v_msg_Login/3}).
v_msg_Login(#'Login'{name = F1, pass = F2}, Path,
	    TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_string(F2, [pass | Path], TrUserData),
    ok;
v_msg_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginConfirmation/3}).
-dialyzer({nowarn_function,v_msg_LoginConfirmation/3}).
v_msg_LoginConfirmation(#'LoginConfirmation'{response =
						 F1},
			Path, TrUserData) ->
    v_type_bool(F1, [response | Path], TrUserData), ok;
v_msg_LoginConfirmation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginConfirmation'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Production/3}).
-dialyzer({nowarn_function,v_msg_Production/3}).
v_msg_Production(#'Production'{product_name = F1,
			       min = F2, max = F3, price = F4, data = F5},
		 Path, TrUserData) ->
    v_type_string(F1, [product_name | Path], TrUserData),
    v_type_int32(F2, [min | Path], TrUserData),
    v_type_int32(F3, [max | Path], TrUserData),
    v_type_float(F4, [price | Path], TrUserData),
    v_type_string(F5, [data | Path], TrUserData),
    ok;
v_msg_Production(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Production'}, X, Path).

-compile({nowarn_unused_function,v_msg_Negotiation/3}).
-dialyzer({nowarn_function,v_msg_Negotiation/3}).
v_msg_Negotiation(#'Negotiation'{importer_offer = F1,
				 product_name = F2, price = F3, amount = F4,
				 data = F5},
		  Path, TrUserData) ->
    v_type_string(F1, [importer_offer | Path], TrUserData),
    v_type_string(F2, [product_name | Path], TrUserData),
    v_type_float(F3, [price | Path], TrUserData),
    v_type_int32(F4, [amount | Path], TrUserData),
    v_type_string(F5, [data | Path], TrUserData),
    ok;
v_msg_Negotiation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Negotiation'}, X, Path).

-compile({nowarn_unused_function,v_msg_BusinessConfirmation/3}).
-dialyzer({nowarn_function,v_msg_BusinessConfirmation/3}).
v_msg_BusinessConfirmation(#'BusinessConfirmation'{response
						       = F1,
						   zeroMQ = F2},
			   Path, TrUserData) ->
    v_type_bool(F1, [response | Path], TrUserData),
    v_type_string(F2, [zeroMQ | Path], TrUserData),
    ok;
v_msg_BusinessConfirmation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BusinessConfirmation'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_NegotiationsConfirmatio/3}).
-dialyzer({nowarn_function,v_msg_NegotiationsConfirmatio/3}).
v_msg_NegotiationsConfirmatio(#'NegotiationsConfirmatio'{acepted
							     = F1},
			      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_AceptedNegotiation(Elem, [acepted | Path],
					 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'AceptedNegotiation'}},
			 F1, [acepted | Path])
    end,
    ok;
v_msg_NegotiationsConfirmatio(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NegotiationsConfirmatio'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AceptedNegotiation/3}).
-dialyzer({nowarn_function,v_msg_AceptedNegotiation/3}).
v_msg_AceptedNegotiation(#'AceptedNegotiation'{importer_offer
						   = F1,
					       product_name = F2, price = F3,
					       amount = F4, data = F5,
					       state = F6},
			 Path, TrUserData) ->
    v_type_string(F1, [importer_offer | Path], TrUserData),
    v_type_string(F2, [product_name | Path], TrUserData),
    v_type_float(F3, [price | Path], TrUserData),
    v_type_int32(F4, [amount | Path], TrUserData),
    v_type_string(F5, [data | Path], TrUserData),
    v_type_string(F6, [state | Path], TrUserData),
    ok;
v_msg_AceptedNegotiation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AceptedNegotiation'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Dropwizard/3}).
-dialyzer({nowarn_function,v_msg_Dropwizard/3}).
v_msg_Dropwizard(#'Dropwizard'{type = F1, username = F2,
			       prod = F3},
		 Path, TrUserData) ->
    v_type_string(F1, [type | Path], TrUserData),
    v_type_string(F2, [username | Path], TrUserData),
    v_type_string(F3, [prod | Path], TrUserData),
    ok;
v_msg_Dropwizard(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Dropwizard'}, X, Path).

-compile({nowarn_unused_function,v_msg_ResponseDropProd/3}).
-dialyzer({nowarn_function,v_msg_ResponseDropProd/3}).
v_msg_ResponseDropProd(#'ResponseDropProd'{products =
					       F1},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Production(Elem, [products | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Production'}},
			 F1, [products | Path])
    end,
    ok;
v_msg_ResponseDropProd(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseDropProd'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'Syn'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Login'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = pass, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'LoginConfirmation'},
      [#field{name = response, fnum = 1, rnum = 2,
	      type = bool, occurrence = required, opts = []}]},
     {{msg, 'Production'},
      [#field{name = product_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = min, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = max, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = price, fnum = 4, rnum = 5, type = float,
	      occurrence = required, opts = []},
       #field{name = data, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Negotiation'},
      [#field{name = importer_offer, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = product_name, fnum = 3, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = price, fnum = 4, rnum = 4, type = float,
	      occurrence = required, opts = []},
       #field{name = amount, fnum = 5, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = data, fnum = 6, rnum = 6, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'BusinessConfirmation'},
      [#field{name = response, fnum = 1, rnum = 2,
	      type = bool, occurrence = required, opts = []},
       #field{name = zeroMQ, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'NegotiationsConfirmatio'},
      [#field{name = acepted, fnum = 1, rnum = 2,
	      type = {msg, 'AceptedNegotiation'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'AceptedNegotiation'},
      [#field{name = importer_offer, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = product_name, fnum = 3, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = price, fnum = 4, rnum = 4, type = float,
	      occurrence = required, opts = []},
       #field{name = amount, fnum = 5, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = data, fnum = 6, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = state, fnum = 7, rnum = 7, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Dropwizard'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = username, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = prod, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ResponseDropProd'},
      [#field{name = products, fnum = 1, rnum = 2,
	      type = {msg, 'Production'}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    ['Syn', 'Login', 'LoginConfirmation', 'Production',
     'Negotiation', 'BusinessConfirmation',
     'NegotiationsConfirmatio', 'AceptedNegotiation',
     'Dropwizard', 'ResponseDropProd'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Syn', 'Login', 'LoginConfirmation', 'Production',
     'Negotiation', 'BusinessConfirmation',
     'NegotiationsConfirmatio', 'AceptedNegotiation',
     'Dropwizard', 'ResponseDropProd'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Syn') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Login') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = pass, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('LoginConfirmation') ->
    [#field{name = response, fnum = 1, rnum = 2,
	    type = bool, occurrence = required, opts = []}];
find_msg_def('Production') ->
    [#field{name = product_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = min, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = max, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = price, fnum = 4, rnum = 5, type = float,
	    occurrence = required, opts = []},
     #field{name = data, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Negotiation') ->
    [#field{name = importer_offer, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = product_name, fnum = 3, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = price, fnum = 4, rnum = 4, type = float,
	    occurrence = required, opts = []},
     #field{name = amount, fnum = 5, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = data, fnum = 6, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def('BusinessConfirmation') ->
    [#field{name = response, fnum = 1, rnum = 2,
	    type = bool, occurrence = required, opts = []},
     #field{name = zeroMQ, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('NegotiationsConfirmatio') ->
    [#field{name = acepted, fnum = 1, rnum = 2,
	    type = {msg, 'AceptedNegotiation'},
	    occurrence = repeated, opts = []}];
find_msg_def('AceptedNegotiation') ->
    [#field{name = importer_offer, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = product_name, fnum = 3, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = price, fnum = 4, rnum = 4, type = float,
	    occurrence = required, opts = []},
     #field{name = amount, fnum = 5, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = data, fnum = 6, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = state, fnum = 7, rnum = 7, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Dropwizard') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = username, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = prod, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ResponseDropProd') ->
    [#field{name = products, fnum = 1, rnum = 2,
	    type = {msg, 'Production'}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"main.proto.Syn">>) -> 'Syn';
fqbin_to_msg_name(<<"main.proto.Login">>) -> 'Login';
fqbin_to_msg_name(<<"main.proto.LoginConfirmation">>) -> 'LoginConfirmation';
fqbin_to_msg_name(<<"main.proto.Production">>) -> 'Production';
fqbin_to_msg_name(<<"main.proto.Negotiation">>) -> 'Negotiation';
fqbin_to_msg_name(<<"main.proto.BusinessConfirmation">>) -> 'BusinessConfirmation';
fqbin_to_msg_name(<<"main.proto.NegotiationsConfirmatio">>) -> 'NegotiationsConfirmatio';
fqbin_to_msg_name(<<"main.proto.AceptedNegotiation">>) -> 'AceptedNegotiation';
fqbin_to_msg_name(<<"main.proto.Dropwizard">>) -> 'Dropwizard';
fqbin_to_msg_name(<<"main.proto.ResponseDropProd">>) -> 'ResponseDropProd';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Syn') -> <<"main.proto.Syn">>;
msg_name_to_fqbin('Login') -> <<"main.proto.Login">>;
msg_name_to_fqbin('LoginConfirmation') -> <<"main.proto.LoginConfirmation">>;
msg_name_to_fqbin('Production') -> <<"main.proto.Production">>;
msg_name_to_fqbin('Negotiation') -> <<"main.proto.Negotiation">>;
msg_name_to_fqbin('BusinessConfirmation') -> <<"main.proto.BusinessConfirmation">>;
msg_name_to_fqbin('NegotiationsConfirmatio') -> <<"main.proto.NegotiationsConfirmatio">>;
msg_name_to_fqbin('AceptedNegotiation') -> <<"main.proto.AceptedNegotiation">>;
msg_name_to_fqbin('Dropwizard') -> <<"main.proto.Dropwizard">>;
msg_name_to_fqbin('ResponseDropProd') -> <<"main.proto.ResponseDropProd">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'main.proto'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "protos.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["protos.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["protos"].


get_msg_containment("protos") ->
    ['AceptedNegotiation', 'BusinessConfirmation',
     'Dropwizard', 'Login', 'LoginConfirmation',
     'Negotiation', 'NegotiationsConfirmatio', 'Production',
     'ResponseDropProd', 'Syn'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("protos") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("protos") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("protos") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("protos") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"main.proto.ResponseDropProd">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.Dropwizard">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.Syn">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.Production">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.Negotiation">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.LoginConfirmation">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.Login">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.BusinessConfirmation">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.AceptedNegotiation">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"main.proto.NegotiationsConfirmatio">>) -> "protos";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.6".

gpb_version_as_list() ->
    [4,10,6].
